{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview @mhoc/axios-digest-auth is a NodeJS library which implements HTTP digest authentication in a manner which should be familiar to any project which also uses Axios. This library is not affiliated with the Axios project or its maintainers, other than its input/output data structures being identical to those Axios uses, and it relying on Axios. Installation $ npm i @mhoc/axios-digest-auth Essential Usage import AxiosDigestAuth from '@mhoc/axios-digest-auth' ; const digestAuth = new AxiosDigestAuth ({ username : process . env . MY_DIGEST_USERNAME , password : process . env . MY_DIGEST_PASSWORD , }); const MakeARequest = async () => { const response = await digestAuth . request ({ headers : { Accept : \"application/json\" }, method : \"GET\" , url : \"https://cloud.mongodb.com/api/atlas/v1.0/groups\" , }); }","title":"Overview"},{"location":"#overview","text":"@mhoc/axios-digest-auth is a NodeJS library which implements HTTP digest authentication in a manner which should be familiar to any project which also uses Axios. This library is not affiliated with the Axios project or its maintainers, other than its input/output data structures being identical to those Axios uses, and it relying on Axios.","title":"Overview"},{"location":"#installation","text":"$ npm i @mhoc/axios-digest-auth","title":"Installation"},{"location":"#essential-usage","text":"import AxiosDigestAuth from '@mhoc/axios-digest-auth' ; const digestAuth = new AxiosDigestAuth ({ username : process . env . MY_DIGEST_USERNAME , password : process . env . MY_DIGEST_PASSWORD , }); const MakeARequest = async () => { const response = await digestAuth . request ({ headers : { Accept : \"application/json\" }, method : \"GET\" , url : \"https://cloud.mongodb.com/api/atlas/v1.0/groups\" , }); }","title":"Essential Usage"},{"location":"api/","text":"API class AxiosDigestAuth import AxiosDigestAuth from \"@mhoc/axios-digest-auth\" ; Application-facing class which stores username/password state and executes requests. new AxiosDigestAuth() const options : AxiosDigestAuthOpts = { axios , password , username , }; const axiosDigestAuthInst = new AxiosDigestAuth ( options ); => AxiosDigestAuthOpts : input object (see below) request() import * as axios from \"axios\" ; // you dont have to import this or add it to your package.json. // just using it to outline where these types are coming from. const ExecuteMyRequest = async () => { const requestOptions : axios.AxiosRequestConfig = { headers : { Accept : \"application/json\" }, method : \"GET\" , url : \"https://cloud.mongodb.com/api/atlas/v1.0/groups\" , }; const response : axios.AxiosResponse = await axiosDigestAuthInst . request ( requestOptions ); }; Executes a request. The signature of this function is identical to Axios's own request method. => axios.AxiosRequestConfig : refer to the Axios documentation for more information on this type. <= axios.AxiosResponse : refer to the Axios documentation for more information on this type. interface AxiosDigestAuthOpts import { AxiosDigestAuthOpts } from \"@mhoc/axios-digest-auth\" ; axios ( axios.Axios | undefined ): Optionally provide an axios object with which requests are made. If this is not provided, axios-digest-auth will create one for you by simply using the axios library default export, with no configuration. password ( string ): the HTTP digest authentication password to use. username ( string ): the HTTP digest authentication username to use.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#class-axiosdigestauth","text":"import AxiosDigestAuth from \"@mhoc/axios-digest-auth\" ; Application-facing class which stores username/password state and executes requests.","title":"class AxiosDigestAuth"},{"location":"api/#new-axiosdigestauth","text":"const options : AxiosDigestAuthOpts = { axios , password , username , }; const axiosDigestAuthInst = new AxiosDigestAuth ( options ); => AxiosDigestAuthOpts : input object (see below)","title":"new AxiosDigestAuth()"},{"location":"api/#request","text":"import * as axios from \"axios\" ; // you dont have to import this or add it to your package.json. // just using it to outline where these types are coming from. const ExecuteMyRequest = async () => { const requestOptions : axios.AxiosRequestConfig = { headers : { Accept : \"application/json\" }, method : \"GET\" , url : \"https://cloud.mongodb.com/api/atlas/v1.0/groups\" , }; const response : axios.AxiosResponse = await axiosDigestAuthInst . request ( requestOptions ); }; Executes a request. The signature of this function is identical to Axios's own request method. => axios.AxiosRequestConfig : refer to the Axios documentation for more information on this type. <= axios.AxiosResponse : refer to the Axios documentation for more information on this type.","title":"request()"},{"location":"api/#interface-axiosdigestauthopts","text":"import { AxiosDigestAuthOpts } from \"@mhoc/axios-digest-auth\" ; axios ( axios.Axios | undefined ): Optionally provide an axios object with which requests are made. If this is not provided, axios-digest-auth will create one for you by simply using the axios library default export, with no configuration. password ( string ): the HTTP digest authentication password to use. username ( string ): the HTTP digest authentication username to use.","title":"interface AxiosDigestAuthOpts"}]}